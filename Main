import pathlib
from pathlib import Path

import numpy as np
from pylab import plot, show, grid, xlabel, ylabel
from scipy import stats
import scipy
import MathematicalModel
import NN
import Config
import Out

import torch
import torch.nn as nn
import torch.nn.functional as F
import time
import logging
import coloredlogs
import matplotlib.pyplot as plt
import matplotlib.backends.backend_pdf as pdfp
import Tests
from copy import deepcopy


class MainRoutine:
    def __init__(self, config, log, out):
        np.random.seed(seed=config.random_seed)

        self.Model = MathematicalModel.MathematicalModel(config.T, config.d, config.mu, config.sigma, config.g, config.xi)
        self.NN = NN.NN(c1, self.Model, log, out)
        self.config = config

        self.N = config.N

        self.log = log
        self.out = out

    def MainSchleife(self):
        log = self.log
        M = self.config.max_number_iterations  # Number of optimization steps
        J = self.config.batch_size  # Batchsize
        L = self.config.val_size  # valsize

        train_individual_payoffs, train_average_payoff, val_continuous_value_list, val_discrete_value_list, val_path_list, actual_stopping_times, train_duration, val_duration, net_net_duration = self.NN.optimization(
            M, J,
            L)
        log.info("\n")

        self.mylog("Overall training took ", sum(train_duration), " seconds and validation took ", sum(val_duration), " seconds. ", sum(net_net_duration),
                   " of the training time was spend on the net itself.")

        if self.config.other_computation_exists:
            log.info("other computation yields: %s", self.config.other_computation)

        # NN, Model, config, average_payoff, val_value_list, train_duration, val_duration, net_net_duration):
        self.out.NN = self.NN
        self.out.config = self.config
        self.out.Model = self.Model
        self.out.average_payoff = train_average_payoff
        self.out.val_value_list = val_continuous_value_list
        self.out.train_duration = train_duration
        self.out.val_duration = val_duration
        self.out.net_net_duration = net_net_duration
        self.out.T = self.Model.getT()
        self.out.N = self.N

        string = self.out.draw_points(val_path_list)
        plt.figure(string)
        
        for k in range(len(val_path_list)):
            stop_point = np.argmax(actual_stopping_times[-1][k])
            plt.scatter(stop_point, val_path_list[k].flatten()[stop_point], marker='o')

        show()



    def myprint(self, *argv):
        out = ''.join(str(s) for s in argv)
        out += "\n"
        print(out)

    def mylog(self, *argv):
        argv = list(argv)
        for s in range(len(argv)):
            if isinstance(argv[s], float):
                argv[s] = round(argv[s], 3)
        out = ''.join(str(s) for s in argv)
        out += "\n"
        self.log.info(out)


if __name__ == '__main__':
    # filename='example.log'
    # stream=sys.stderr,
    folder_name = "Testrun1"
    working_directory = pathlib.Path().absolute()
    output_location = working_directory / f'{folder_name}'

    out = Out.Output(output_location)

    log = logging.getLogger('l')
    logging.basicConfig(format='%(asctime)s:  %(message)s')
    log.setLevel(logging.DEBUG)
    # coloredlogs.install(level='DEBUG', fmt='%(asctime)s %(message)s', logger=log) # if i activate this then all the print messages are displayed

    fh = logging.FileHandler('log.log')
    formatter = logging.Formatter('%(asctime)s %(message)s')
    fh.setFormatter(formatter)
    log.addHandler(fh)

    start_time = time.time()
    config_time = time.time()

    # initialisiere Configs
    config_list = []
    c1 = Config.Config("2", log)
    config_list.append(c1)
    """
    c2 = deepcopy(c1)
    c2.xi = 38
    c2.compute_other_value()
    config_list.append(c2)
    """
    log.info("time for config is %s seconds" % round((time.time() - config_time), 3))

    """
    log.debug("hi")
    log.critical("iovbu")
    log.warning("onv√∂dsgo")
    log.error("zkigbaezg")
    """

    test = True
    test = False

    if test:
        Model = MathematicalModel.MathematicalModel(c1.T, c1.d, c1.mu, c1.sigma, c1.g, c1.xi)
        tests = Tests.Tests(out, Model)
        tests.test_good()
    else:
        for k in range(len(config_list)):
            log.info(str(k) + "-th config with parameters: \n" + config_list[k].parameter_string)
            lokaleMainRoutine = MainRoutine(config_list[k], log, out)
            lokaleMainRoutine.MainSchleife()

            out.create_pdf("net_values_" + str(k) + ".pdf")

    log.info("time for everything is %s seconds" % round((time.time() - start_time), 3))
